name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-release:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            target: x86_64-linux
            artifact_name: wx
            asset_name: wx-linux-x86_64
          - os: windows-latest
            target: x86_64-windows
            artifact_name: wx.exe
            asset_name: wx-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-macos
            artifact_name: wx
            asset_name: wx-macos-x86_64
          - os: macos-latest
            target: aarch64-macos
            artifact_name: wx
            asset_name: wx-macos-aarch64

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.15.1

      - name: Build wx
        run: zig build -Dtarget=${{ matrix.target }} -Doptimize=ReleaseFast

      - name: Rename artifact
        shell: bash
        run: |
          if [ -f "./zig-out/bin/${{ matrix.artifact_name }}" ]; then
            cp "./zig-out/bin/${{ matrix.artifact_name }}" "./${{ matrix.asset_name }}"
            echo "Successfully created ${{ matrix.asset_name }}"
            ls -lh "./${{ matrix.asset_name }}"
          else
            echo "Error: Binary not found at ./zig-out/bin/${{ matrix.artifact_name }}"
            echo "Contents of ./zig-out/bin/:"
            ls -la ./zig-out/bin/ || echo "Directory not found"
            exit 1
          fi

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: ./${{ matrix.asset_name }}
          if-no-files-found: error

  create-release:
    needs: build-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-artifacts

      - name: Display structure of downloaded files
        run: ls -R ./release-artifacts

      - name: Prepare release files
        run: |
          mkdir -p ./release-files
          find ./release-artifacts -type f -exec cp {} ./release-files/ \;
          ls -lh ./release-files/

      - name: Generate checksums
        run: |
          cd ./release-files
          sha256sum * > checksums.txt
          cat checksums.txt
          cd ..

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: ./release-files/*
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          generate_release_notes: true
          body: |
            ## Installation

            Download the appropriate binary for your platform and add it to your PATH.

            ### Verification

            You can verify the integrity of the downloaded files using the checksums provided in `checksums.txt`.

            ```bash
            sha256sum -c checksums.txt
            ```

            ### Docker Images

            Container images are also available:
            - GitHub Container Registry: `ghcr.io/${{ github.repository }}:${{ github.ref_name }}`
            - Docker Hub: `clpi/wx:${{ github.ref_name }}`
            - Quay.io: `quay.io/${{ github.repository_owner }}/wx:${{ github.ref_name }}`
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
